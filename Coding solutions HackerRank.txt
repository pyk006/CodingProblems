1. Given an array of integers, calculate the ratios of its elements that are positive, negative, and zero. Print the decimal value of each fraction on a new line with  places after the decimal.

    public static void plusMinus(List<Integer> arr) {
    // Write your code here
        int total = arr.size();
        int positives = (int) arr.stream().filter(el -> el > 0).count();
        int negatives = (int) arr.stream().filter(el -> el < 0).count();
        int zeros = (int) arr.stream().filter(el -> el == 0).count();
        int[] arrOfAll = new int[]{positives, negatives, zeros};
        
        for (int val : arrOfAll) {
            System.out.println((double) val / total);
        }
        
    }

2. Given five positive integers, find the minimum and maximum values that can be calculated by summing exactly four of the five integers. 
Then print the respective minimum and maximum values as a single line of two space-separated long integers.

    public static void miniMaxSum(List<Integer> arr) {
    int[] arrs = new int[arr.size()];

    for (int i = 0; i < arr.size(); i++) {
        arrs[i] = arr.get(i);
    }
    Arrays.sort(arrs);
    BigInteger total = BigInteger.ZERO;
    for (int num : arrs) {
        total = total.add(BigInteger.valueOf(num));
    }
    BigInteger min = total.subtract(BigInteger.valueOf(arrs[arrs.length - 1]));
    BigInteger max = total.subtract(BigInteger.valueOf(arrs[0]));
    System.out.println(min + " " + max);

    }

3. Given an array of integers, where all elements but one occur twice, find the unique element.

    public static int lonelyinteger(List<Integer> a) {
    // Write your code here
        Map<Integer, Integer> mapOfAll = new HashMap<>();
        
        for (int i = 0; i < a.size(); i++) {
            if (!mapOfAll.containsKey(a.get(i))) {
                mapOfAll.put(a.get(i), 1);
            } else {
                mapOfAll.put(a.get(i), mapOfAll.get(a.get(i)) + 1);
            }
        }
        for (int val : mapOfAll.keySet()) {
            if (mapOfAll.get(val) == 1) {
                return val;
            }
        }
        return -1;
    }

4. A pangram is a string that contains every letter of the alphabet. Given a sentence determine whether it is a pangram in the English alphabet. 
Ignore case. Return either pangram or not pangram as appropriate.

    public static String pangrams(String s) {
    // Write your code here
        Map<Character, Integer> mapOfPangram = new HashMap<>();
        s = s.toLowerCase();
        for (int i = 0; i < s.length(); i++) {
            if (!mapOfPangram.containsKey(s.charAt(i)) && Character.isLetter(s.charAt(i))) {
                mapOfPangram.put(s.charAt(i), 1);
            }
        }
        return mapOfPangram.size() == 26 ? "pangram" : "not pangram";
    }

5. Given a time in -hour AM/PM format, convert it to military (24-hour) time.
Note: - 12:00:00AM on a 12-hour clock is 00:00:00 on a 24-hour clock.
- 12:00:00PM on a 12-hour clock is 12:00:00 on a 24-hour clock.

public static String timeConversion(String s) {
    String[] split = s.split(":");
    int hour = Integer.parseInt(split[0]);
    String replaced = split[0];
    String valueReplace = "";

    if (split[2].contains("PM")) {
        s = s.replace("PM", "");
        if (hour != 12) {
            valueReplace = String.valueOf(hour + 12);
            s = s.replace(replaced, valueReplace);
        }
    } else {
        s = s.replace("AM", "");
        if (hour + 12 == 24) {
            valueReplace = "00";
            s = s.replace(replaced, valueReplace);
        }
    }
    return s;
}

6. There is a collection of input strings and a collection of query strings.
For each query string, determine how many times it occurs in the list of input strings. Return an array of the results.

    public static List<Integer> matchingStrings(List<String> strings, List<String> queries) {
    // Write your code here
        int count = 0;
        List<Integer> listOfAll = new ArrayList<>();
        for (int i = 0; i < queries.size(); i++) {
            for (int j = 0; j < strings.size(); j++) {
                if(strings.get(j).equals(queries.get(i))) {
                    count += 1;
                }
            }
            listOfAll.add(count);
            count = 0;
        }
        return listOfAll;
    }

7. Given a square matrix, calculate the absolute difference between the sums of its diagonals.
For example, the square matrix  is shown below:

    public static int diagonalDifference(List<List<Integer>> arr) {
        int firstDiagonal = 0;
        int secondDiagonal = 0;
    for (int i = 0; i < arr.size(); i++) {
        for (int j = 0; j < arr.get(i).size(); j++) {
            if (i == j) {
                firstDiagonal += arr.get(i).get(j);
            }
        }
    }
    for (int i = 0; i < arr.size(); i++) {
            for (int j = 0; j < arr.get(i).size(); j++) {
                if (i + j == arr.get(i).size() - 1) { 
                    secondDiagonal += arr.get(i).get(j);
                }
            }

    }
        return Math.abs(firstDiagonal - secondDiagonal);
   }

8.     There is a large pile of socks that must be paired by color. Given an array of integers representing the color of each sock, determine how many pairs of socks with matching colors there are.

public static int sockMerchant(int n, List<Integer> ar) {
    // Write your code here
    Map <Integer, Integer> mapOfPairs = new HashMap<>();
    for (int i = 0; i < ar.size(); i++) {
        if (!mapOfPairs.containsKey(ar.get(i))) {
            mapOfPairs.put(ar.get(i), 1);
        } else {
            mapOfPairs.put(ar.get(i), mapOfPairs.get(ar.get(i)) + 1);
        }
    }
    int count = 0;
    for (Integer pairs : mapOfPairs.keySet()) {
        count += (int) mapOfPairs.get(pairs) / 2;
    }
    return count;
    }

9. Julius Caesar protected his confidential information by encrypting it using a cipher. Caesar's cipher shifts each letter by a number of letters. If the shift takes you past the end of the alphabet, just rotate back to the front of the alphabet. In the case of a rotation by 3, w, x, y and z would map to z, a, b and c.

    public static String caesarCipher(String s, int k) {
    // Write your code here
    String cipher = "";
    int ascii = 0;
        for (int i = 0; i < s.length(); i++) {
            if (Character.isLetter(s.charAt(i)) && Character.isLowerCase(s.charAt(i))) {
                ascii = ((k + (int) s.charAt(i) - 97) % 26) + 97;

                cipher += (char) ascii;
                ascii = 0;
            } else if (Character.isLetter(s.charAt(i)) && Character.isUpperCase(s.charAt(i))) {
                ascii = ((k + (int) s.charAt(i) - 65) % 26) + 65;
                cipher += (char) ascii;
            } else {
            cipher += s.charAt(i);
            }
        }
        return cipher;
    }

10. Given an array of integers and a positive integer k, determine the number of (i,j) pairs where i < j and ar[i] + ar[j] is divisible by k.

    public static int divisibleSumPairs(int n, int k, List<Integer> ar) {
    // Write your code here
    List<List<Integer>> values = new ArrayList<>();
    List<Integer> pairs = new ArrayList<>();
        for (int i = 0; i < ar.size(); i++) {
            for (int j = i + 1; j < ar.size(); j++) {

                if (i != j && ((ar.get(i) + ar.get(j)) % k == 0)) {
                pairs.add(ar.get(i));
                pairs.add(ar.get(j));
                    values.add(pairs);
                    System.out.println(values);
                }
                pairs = new ArrayList<>();
            }
        }
        return values.size();
    }
