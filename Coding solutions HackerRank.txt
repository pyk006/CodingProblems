1. Given an array of integers, calculate the ratios of its elements that are positive, negative, and zero. Print the decimal value of each fraction on a new line with  places after the decimal.

    public static void plusMinus(List<Integer> arr) {
    // Write your code here
        int total = arr.size();
        int positives = (int) arr.stream().filter(el -> el > 0).count();
        int negatives = (int) arr.stream().filter(el -> el < 0).count();
        int zeros = (int) arr.stream().filter(el -> el == 0).count();
        int[] arrOfAll = new int[]{positives, negatives, zeros};
        
        for (int val : arrOfAll) {
            System.out.println((double) val / total);
        }
        
    }

2. Given five positive integers, find the minimum and maximum values that can be calculated by summing exactly four of the five integers. 
Then print the respective minimum and maximum values as a single line of two space-separated long integers.

    public static void miniMaxSum(List<Integer> arr) {
    int[] arrs = new int[arr.size()];

    for (int i = 0; i < arr.size(); i++) {
        arrs[i] = arr.get(i);
    }
    Arrays.sort(arrs);
    BigInteger total = BigInteger.ZERO;
    for (int num : arrs) {
        total = total.add(BigInteger.valueOf(num));
    }
    BigInteger min = total.subtract(BigInteger.valueOf(arrs[arrs.length - 1]));
    BigInteger max = total.subtract(BigInteger.valueOf(arrs[0]));
    System.out.println(min + " " + max);

    }

3. Given an array of integers, where all elements but one occur twice, find the unique element.

    public static int lonelyinteger(List<Integer> a) {
    // Write your code here
        Map<Integer, Integer> mapOfAll = new HashMap<>();
        
        for (int i = 0; i < a.size(); i++) {
            if (!mapOfAll.containsKey(a.get(i))) {
                mapOfAll.put(a.get(i), 1);
            } else {
                mapOfAll.put(a.get(i), mapOfAll.get(a.get(i)) + 1);
            }
        }
        for (int val : mapOfAll.keySet()) {
            if (mapOfAll.get(val) == 1) {
                return val;
            }
        }
        return -1;
    }

4. A pangram is a string that contains every letter of the alphabet. Given a sentence determine whether it is a pangram in the English alphabet. 
Ignore case. Return either pangram or not pangram as appropriate.

    public static String pangrams(String s) {
    // Write your code here
        Map<Character, Integer> mapOfPangram = new HashMap<>();
        s = s.toLowerCase();
        for (int i = 0; i < s.length(); i++) {
            if (!mapOfPangram.containsKey(s.charAt(i)) && Character.isLetter(s.charAt(i))) {
                mapOfPangram.put(s.charAt(i), 1);
            }
        }
        return mapOfPangram.size() == 26 ? "pangram" : "not pangram";
    }
