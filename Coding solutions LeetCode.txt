LeetCode Problems
1.  Median of Two Arrays : Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.
The overall run time complexity should be O(log (m+n)).

Answer: 
class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
    //Get the length for the new merged array and create new array
        int mergedLength = nums1.length + nums2.length;
        int[] nums3 = new int[mergedLength];
        //Create copies of nums1 and nums2 and initialize them in your new array
        System.arraycopy(nums1, 0, nums3, 0, nums1.length);  
        System.arraycopy(nums2, 0, nums3, nums1.length, nums2.length); 
        double median = 0;
        Arrays.sort(nums3);
        //Calculate for median when it has one median value or two median values
        if (nums3.length % 2 == 0) {
    median = ((double)nums3[nums3.length/2] + (double)nums3[nums3.length/2 - 1])/2;
} else {
    median = (double) nums3[nums3.length/2];
        return median;
        }
    }
}


2. 3Sum : Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.
Notice that the solution set must not contain duplicate triplets.

Answer:
class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> listOfTriplets = new ArrayList<>();
        Set<String> checkForDuplicates = new HashSet<>();

        Arrays.sort(nums); // Sort the array to optimize duplicate checks

        for (int i = 0; i < nums.length - 2; i++) {
            int j = i + 1;
            int k = nums.length - 1;

            while (j < k) {
                int sum = nums[i] + nums[j] + nums[k];

                if (sum == 0) {
                    List<Integer> triplet = Arrays.asList(nums[i], nums[j], nums[k]);
                    String tripletString = triplet.toString(); // Convert triplet to a string

                    if (!checkForDuplicates.contains(tripletString)) {
                        checkForDuplicates.add(tripletString);
                        listOfTriplets.add(triplet);
                    }

                    j++;
                    k--;
                } else if (sum < 0) {
                    j++;
                } else {
                    k--;
                }
            }
        }

        return listOfTriplets;
    }
}

3. Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

You can return the answer in any order

class Solution {
    public int[] twoSum(int[] nums, int target) {
        for (int i = 0; i < nums.length; i++) {
            for (int j = 1; j < nums.length; j++) {
                if (nums[i] + nums[j] == target && i != j) {
                    return new int[] {i, j};
                }
            }

            }
            return new int[]{0};
        }

    }
    
4. Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.

 class Solution {
    public boolean containsDuplicate(int[] nums) {
        Set<Integer> set = new HashSet<>();
        for (int num : nums) {
            if (set.contains(num)) {
                return true;
            }
            set.add(num);
        }
        return false;
    }
}
5. Given two strings needle and haystack, return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.

class Solution {
    public int strStr(String haystack, String needle) {
        return haystack.indexOf(needle);
    }
}

6. Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.
You must implement a solution with a linear runtime complexity and use only constant extra space.

class Solution {
    public int singleNumber(int[] nums) {
        List<Integer> listNumbers = Arrays.stream(nums)
                .boxed()
                .collect(Collectors.toList());
        for (int i = 0; i < listNumbers.size(); i++) {
            if (listNumbers.indexOf(listNumbers.get(i)) == listNumbers.lastIndexOf(listNumbers.get(i))) {
                return listNumbers.get(i);
            }
        }
        return 0;
    }
}

7. Write a function that takes the binary representation of an unsigned integer and returns the number of '1' bits it has (also known as the Hamming weight).

public class Solution {
    // you need to treat n as an unsigned value
    public int hammingWeight(int n) {
        String binaryString = Integer.toBinaryString(n);

        String[] binaryStringArr = binaryString.split("");

        return (int) Arrays.stream(binaryStringArr).filter(val -> val.equals("1")).count();
    }
}

8. Given an array nums. We define a running sum of an array as runningSum[i] = sum(nums[0]…nums[i]). Return the running sum of nums.

class Solution {
    public int[] runningSum(int[] nums) {
        int a = 0;
        int[] sums = new int[nums.length];
        for (int i = 0; i < nums.length; i++) {
            sums[i] = a + nums[i];
            a = a + nums[i];
        }
        return sums;
    }
}

9. There is a programming language with only four operations and one variable X:

++X and X++ increments the value of the variable X by 1.
--X and X-- decrements the value of the variable X by 1.
Initially, the value of X is 0.

Given an array of strings operations containing a list of operations, return the final value of X after performing all the operations.

class Solution {
    public int finalValueAfterOperations(String[] operations) {
        int count = 0;
        for (int i = 0; i < operations.length; i++) {
            if (operations[i].contains("--")) {
                count -=1;
            } else {
                count +=1;
            }
        }
        return count;
    }
}

10. Given the array nums, for each nums[i] find out how many numbers in the array are smaller than it. That is, for each nums[i] you have to count the number of valid j's such that j != i and nums[j] < nums[i].
Return the answer in an array.

class Solution {
    public int[] smallerNumbersThanCurrent(int[] nums) {
        int[] numSmalls = new int[nums.length];
        int count = 0;
        for (int i = 0; i < nums.length; i++) {
            for (int j = 0; j < nums.length; j++) {
                if (nums[i] > nums[j]) {
                    count+=1;
                }
            }
            numSmalls[i] = count;
            count = 0;
        }
        return numSmalls;
    }
}

11. There are n kids with candies. You are given an integer array candies, where each candies[i] represents the number of candies the ith kid has, and an integer extraCandies, denoting the number of extra candies that you have.
Return a boolean array result of length n, where result[i] is true if, after giving the ith kid all the extraCandies, they will have the greatest number of candies among all the kids, or false otherwise.
Note that multiple kids can have the greatest number of candies.

class Solution {
    public List<Boolean> kidsWithCandies(int[] candies, int extraCandies) {
        List<Boolean> listOfLargest = new ArrayList<>();
        int max = Arrays.stream(candies).max().orElse(0);
        for (int i = 0; i < candies.length; i++) {
            if (candies[i] + extraCandies >= max) {
                listOfLargest.add(true);
            } else {
                listOfLargest.add(false);
            }
        }
        return listOfLargest;
    }
}

12. You are given an m x n integer grid accounts where accounts[i][j] is the amount of money the i​​​​​​​​​​​th​​​​ customer has in the j​​​​​​​​​​​th​​​​ bank. Return the wealth that the richest customer has.
A customer's wealth is the amount of money they have in all their bank accounts. The richest customer is the customer that has the maximum wealth.

class Solution {
    public int maximumWealth(int[][] accounts) {
        List<Integer> listOfAccounts = new ArrayList<>();
        for (int[] account : accounts) {
            listOfAccounts.add(Arrays.stream(account).reduce((a,b) -> a + b).orElse(0));
        }
        return Collections.max(listOfAccounts);
    }
}

13. You are given two positive integers n and k. A factor of an integer n is defined as an integer i where n % i == 0.
Consider a list of all factors of n sorted in ascending order, return the kth factor in this list or return -1 if n has less than k factors.

class Solution {
    public int kthFactor(int n, int k) {
        List<Integer>listOfFactors = new ArrayList<>();
        for (int i = 1; i <= n; i++) {
            if (n % i == 0) {
                listOfFactors.add(i);
            }
        }
            if (k > listOfFactors.size()) {
                return -1; // k is out of bounds
        }
         return listOfFactors.get(k - 1);
    }
}

14. Given an integer num, repeatedly add all its digits until the result has only one digit, and return it.

class Solution {
 public static int addDigits(int num) {
        String[] nums = String.valueOf(num).split("");
        while (nums.length > 1) {
            nums = String.valueOf(Arrays.stream(nums).mapToInt(numInArr -> Integer.parseInt(numInArr)).sum()).split("");
        }
        return Integer.parseInt(String.join("", nums));
    }
}

15. Given a positive integer num, return true if num is a perfect square or false otherwise.
A perfect square is an integer that is the square of an integer. In other words, it is the product of some integer with itself.
You must not use any built-in library function, such as sqrt.

class Solution {
    public boolean isPerfectSquare(int num) {

        for (int i = 1; i <= num / i; i++) {
            if (i * i == num) {
                return true;
            }
        }
        return false;
    }
}

16. You are given a 0-indexed array of strings details. Each element of details provides information about a given passenger compressed into a string of length 15. The system is such that:
The first ten characters consist of the phone number of passengers.
The next character denotes the gender of the person.
The following two characters are used to indicate the age of the person.
The last two characters determine the seat allotted to that person.
Return the number of passengers who are strictly more than 60 years old.

class Solution {
    public int countSeniors(String[] details) {
        int count = 0;
        for (int i = 0; i < details.length; i++) {
            if (Integer.parseInt(details[i].substring(11, 13))  > 60) {
                count += 1;
            }
        }
        return count;
    }
}

17. A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.
Given a string s, return true if it is a palindrome, or false otherwise.

class Solution {
    public boolean isPalindrome(String s) {
        if (s.length() == 0) {
            return true;
        }
        String checked = s.replaceAll("[^a-zA-Z0-9]", "");
        checked = checked.toLowerCase();
        StringBuilder reversed = new StringBuilder(checked);
        String reversedStr = reversed.reverse().toString();
        return checked.equals(reversedStr);
    }
}

18. Given an array nums of size n, return the majority element.
The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.

 

class Solution {
    public int majorityElement(int[] nums) {
        Map<Integer, Integer> mapOfOccurences = new HashMap<>();
        for (int i = 0; i < nums.length; i++) {
            if (!mapOfOccurences.containsKey(nums[i])) {
                mapOfOccurences.put(nums[i], 1);
            } else {
                mapOfOccurences.put(nums[i], mapOfOccurences.get(nums[i]) + 1);
            }
        }
        int max = Integer.MIN_VALUE;
        int numToMajority = 0;
        for (Integer num : mapOfOccurences.keySet()) {
            if (mapOfOccurences.get(num) > max) {
                max = mapOfOccurences.get(num);
                numToMajority = num;
            }
        }
        return numToMajority;
        
    }
}

19. Given two strings s and t, return true if t is an anagram of s, and false otherwise.
An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.

class Solution {
    public boolean isAnagram(String s, String t) {
        Map<Character, Integer> mapOfAllLetters = new HashMap<>();
        Map<Character, Integer> mapOfAllLettersT = new HashMap<>();
        for (int i = 0; i < s.length(); i++) {
mapOfAllLetters.put(s.charAt(i), !mapOfAllLetters.containsKey(s.charAt(i)) ? 1 : mapOfAllLetters.get(s.charAt(i)) + 1);


        }
        for (int i = 0; i < t.length(); i++) {
mapOfAllLettersT.put(t.charAt(i), !mapOfAllLettersT.containsKey(t.charAt(i)) ? 1 : mapOfAllLettersT.get(t.charAt(i)) + 1);


        }
        return mapOfAllLetters.equals(mapOfAllLettersT);
    }
}

20. The Fibonacci numbers, commonly denoted F(n) form a sequence, called the Fibonacci sequence, such that each number is the sum of the two preceding ones, starting from 0 and 1. That is,
F(0) = 0, F(1) = 1
F(n) = F(n - 1) + F(n - 2), for n > 1.
Given n, calculate F(n).

class Solution {
    public int fib(int n) {
        int num1 = 0;
        int num2 = 1;
        int num3 = 0;

        for (int i = 0; i < n; i++) {
            num1 = num2;
            num2 = num3;
            num3 = num1 + num2;
        }
        return num3;
    }
}

21. Given an integer array nums where every element appears three times except for one, which appears exactly once. Find the single element and return it.
You must implement a solution with a linear runtime complexity and use only constant extra space.

class Solution {
    public int singleNumber(int[] nums) {
        List<Integer> listOfNums = Arrays.stream(nums).boxed().collect(Collectors.toList());
        for (int i = 0; i < listOfNums.size(); i++) {
            if (listOfNums.indexOf(listOfNums.get(i)) == listOfNums.lastIndexOf(listOfNums.get(i))) {
                return listOfNums.get(i);
            }
        }

        return 0;
    }
}

22. Given an array nums containing n distinct numbers in the range [0, n], return the only number in the range that is missing from the array.

class Solution {
    public int missingNumber(int[] nums) {
        Arrays.sort(nums);
        for (int i = 0; i < nums.length; i++) {
            if(nums[i] != i) return i;
        }
        return nums.length;
    }
}

23. Given an array of integers arr, a lucky integer is an integer that has a frequency in the array equal to its value.
Return the largest lucky integer in the array. If there is no lucky integer return -1.

class Solution {
    public int findLucky(int[] arr) {
        Map<Integer, Integer> allInts = new HashMap<>();
        List<Integer> luckyValues = new ArrayList<>();
        for (int i = 0; i < arr.length; i++) {
            if (!allInts.containsKey(arr[i])) {
                allInts.put(arr[i], 1);
            } else {
                allInts.put(arr[i], allInts.get(arr[i]) + 1);
            }
        }
        for (Integer val : allInts.keySet()) {
            if (allInts.get(val) == val) {
                 luckyValues.add(val);
            }
        }
        return luckyValues.size() > 0 ? Collections.max(luckyValues) : -1;

    }
}

24. Given an integer array nums of length n where all the integers of nums are in the range [1, n] and each integer appears once or twice, return an array of all the integers that appears twice.
You must write an algorithm that runs in O(n) time and uses only constant extra space.

class Solution {
    public List<Integer> findDuplicates(int[] nums) {
        Map<Integer,Integer> mapOfDuplicates = new HashMap<>();
        List<Integer> listOfTwos = new ArrayList<>();
        for (int i = 0; i < nums.length; i++) {
            if (!mapOfDuplicates.containsKey(nums[i])) {
                mapOfDuplicates.put(nums[i], 1);
            } else {
                mapOfDuplicates.put(nums[i], mapOfDuplicates.get(nums[i]) + 1);
            }

        }
        for (Integer num : mapOfDuplicates.keySet()) {
            if (mapOfDuplicates.get(num) == 2) {
                listOfTwos.add(num);
            }
        }
        return listOfTwos;
    }
}

25. A sentence is a list of words that are separated by a single space with no leading or trailing spaces.
You are given an array of strings sentences, where each sentences[i] represents a single sentence.
Return the maximum number of words that appear in a single sentence.

class Solution {
    public int mostWordsFound(String[] sentences) {
        return Arrays.stream(sentences).mapToInt(el -> el.split(" ").length).max().orElse(0);
    }
}

26. There is a malfunctioning keyboard where some letter keys do not work. All other keys on the keyboard work properly.
Given a string text of words separated by a single space (no leading or trailing spaces) and a string brokenLetters of all distinct letter keys that are broken, return the number of words in text you can fully type using this keyboard.

class Solution {
    public int canBeTypedWords(String text, String brokenLetters) {
        if (brokenLetters.length() == 0) {
            return text.split(" ").length;
        }
        String[] textArr = text.split(" ");
        String[] chars = brokenLetters.split("");
        return (int) Arrays.stream(textArr).filter(word -> Arrays.stream(chars).noneMatch(word::contains)).count();
    }
}

27. Given two strings s and p, return an array of all the start indices of p's anagrams in s. You may return the answer in any order.
An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.

class Solution {
    public List<Integer> findAnagrams(String s, String p) {
        int subLength = p.length();
        List<Integer> listOfAnagram = new ArrayList<>();
                char[] charsp = p.toCharArray();
                Arrays.sort(charsp);
                char[] charsub;
        for (int i = 0; i < s.length(); i++) {
            if (i + subLength <= s.length()) {
                charsub = s.substring(i, i + subLength).toCharArray();
                Arrays.sort(charsub);
                if (Arrays.equals(charsub,charsp)) {
                    listOfAnagram.add(i);
                }
        }
     }
             return listOfAnagram;
    }
}

28. A school is trying to take an annual photo of all the students. The students are asked to stand in a single file line in non-decreasing order by height. Let this ordering be represented by the integer array expected where expected[i] is the expected height of the ith student in line.
You are given an integer array heights representing the current order that the students are standing in. Each heights[i] is the height of the ith student in line (0-indexed).
Return the number of indices where heights[i] != expected[i].

class Solution {
    public int heightChecker(int[] heights) {
        int wrong = 0;
        int[] expected = Arrays.copyOf(heights, heights.length);
        Arrays.sort(expected);
        for (int i = 0; i < heights.length; i++) {
            if (heights[i] != expected[i]) {
                wrong+=1;
            }
        }
        return wrong;
    }
}

29. Given an integer array nums, move all the even integers at the beginning of the array followed by all the odd integers.
Return any array that satisfies this condition.

class Solution {
    public int[] sortArrayByParity(int[] nums) {
        int[] parityArr = new int[nums.length];
        int indexE = 0;
        int indexO = nums.length - 1;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] % 2 == 0) {
                parityArr[indexE] = nums[i];
                indexE+=1;
            } else {
                parityArr[indexO] = nums[i];
                indexO -= 1;
            }
            
        }
        return parityArr;
        
    }
}

30. Given an array of integers nums, half of the integers in nums are odd, and the other half are even.
Sort the array so that whenever nums[i] is odd, i is odd, and whenever nums[i] is even, i is even.
Return any answer array that satisfies this condition.

class Solution {
    public int[] sortArrayByParityII(int[] nums) {
        int[] parityArr = new int[nums.length];
        int evenIndex = 0;
        int oddIndex = 1;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] % 2 == 0) {
                parityArr[evenIndex] += nums[i];
                evenIndex += 2;
            } else {
                parityArr[oddIndex] += nums[i];
                oddIndex += 2;
            }
        }
        return parityArr;

    }
}

31. Given a roman numeral, convert it to an integer.

class Solution {
    public int romanToInt(String str) {
        int acc = 0;
        int i = 0;
        while (i < str.length()) {

            if (i + 1 < str.length() && str.charAt(i) == 'I' && str.charAt(i+1) == 'V') {
                acc += 4;
                i+=2;
            } else if (i + 1 < str.length() && str.charAt(i) == 'X' && str.charAt(i+1) == 'L') {
                acc += 40;
                i+=2;
            } else if (i + 1 < str.length() && str.charAt(i) == 'I' && str.charAt(i+1) == 'X') {
                acc += 9;
                i+=2;
            } else if (i + 1 < str.length() && str.charAt(i) == 'X' && str.charAt(i+1) == 'C') {
                acc += 90;
                i+=2;
            } else if (i + 1 < str.length() && str.charAt(i) == 'C' && str.charAt(i+1) == 'D') {
                acc += 400;
                i+=2;
            } else if (i + 1 < str.length() && str.charAt(i) == 'C' && str.charAt(i+1) == 'M') {
                acc += 900;
                i+=2;
            } else if (str.charAt(i) == 'I') {
                acc += 1;
                i += 1;
            } else if (str.charAt(i) == 'V') {
                acc += 5;
                i += 1;
            } else if (str.charAt(i) == 'X') {
                acc += 10;
                i += 1;
            } else if (str.charAt(i) == 'L') {
                acc += 50;
                i += 1;
            } else if (str.charAt(i) == 'C') {
                acc += 100;
                i += 1;
            } else if (str.charAt(i) == 'D') {
                acc += 500;
                i += 1;
            } else if (str.charAt(i) == 'M') {
                acc += 1000;
                i += 1;
                }
            }
        
        return acc;
    }
}

32. Given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.
There is only one repeated number in nums, return this repeated number.
You must solve the problem without modifying the array nums and uses only constant extra space.

class Solution {
    public int findDuplicate(int[] nums) {
        Map<Integer, Integer> mapOfNum = new HashMap<>();
        for (int i = 0; i < nums.length; i++) {
            if (!mapOfNum.containsKey(nums[i])) {
                mapOfNum.put(nums[i], 1);
            } else {
                return nums[i];
            }
        }
        return -1;
    }
}

33. Given two binary strings a and b, return their sum as a binary string.

import java.util.*;
import java.math.BigInteger;
class Solution {
    public String addBinary(String a, String b) {
        BigInteger val1 = new BigInteger(a, 2);
        BigInteger val2 = new BigInteger(b, 2);
        BigInteger sum = val1.add(val2);
        return sum.toString(2);

    }
}

34. Given an integer array nums, in which exactly two elements appear only once and all the other elements appear exactly twice. Find the two elements that appear only once. You can return the answer in any order.
You must write an algorithm that runs in linear runtime complexity and uses only constant extra space.

import java.util.*;
class Solution {
    public int[] singleNumber(int[] nums) {
        Map<Integer, Integer> mapOfNums = new HashMap<>();
        int[] arr = new int[2];
        int j = 0;
        for (int i = 0; i < nums.length; i++) {
            if (!mapOfNums.containsKey(nums[i])) {
                mapOfNums.put(nums[i], 1);
            } else {
                mapOfNums.put(nums[i], mapOfNums.get(nums[i]) + 1);
            }
        }
        for (Integer num : mapOfNums.keySet()) {
            if (mapOfNums.get(num) == 1) {
                arr[j] = num;
                j += 1;
            }
        }
        return arr;
    }
}

35. Given a string s, find the first non-repeating character in it and return its index. If it does not exist, return -1.

class Solution {
    public int firstUniqChar(String s) {
        for (int i = 0; i < s.length(); i++) {
            if (s.lastIndexOf(s.charAt(i)) == s.indexOf(s.charAt(i))) {
                return i;
            }
        }
        return -1;
    }
}

36. You are given a string s representing an attendance record for a student where each character signifies whether the student was absent, late, or present on that day. The record only contains the following three characters:

'A': Absent.
'L': Late.
'P': Present.
The student is eligible for an attendance award if they meet both of the following criteria:

The student was absent ('A') for strictly fewer than 2 days total.
The student was never late ('L') for 3 or more consecutive days.
Return true if the student is eligible for an attendance award, or false otherwise.

class Solution {
    public boolean checkRecord(String s) {
        int absentCount = 0;
        int lateCount = 0;

        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == 'A') {
                absentCount +=1;
            }
            if (s.charAt(i) == 'L') {
                int j = i;
                while (j < s.length() && s.charAt(j) == 'L') {
                    lateCount += 1;
                    j += 1;
                }
                if (lateCount >= 3) {
                    return false;
                }
                lateCount = 0;
            }
        }
        return absentCount >= 2 ? false : true;
    }
}
